#! /bin/sh
OUTPUT_DEV="/dev/mtdblock2"
DATA_DEV="/dev/mtdblock7"
PREV_OUTPUT_CID_BLOCKDEV="/dev/mtdblock6"

if [ "$RUNTIME_CONFIG" = "qemu" ]; then
  ARCH=amd64
else
  ARCH=riscv64
fi

ARCH_PATH="/opt/$ARCH/bin"

echo "====================== TOSI STANDARD LOADER ========"
echo

export HOME=/root

echo "Mounting tmpfs on /mnt"
mount -t tmpfs tmpfs /mnt
echo "Mounting tmpfs on /root"
mount -t tmpfs tmpfs /root
echo "Mounting tmpfs on /tmp"
mount -t tmpfs tmpfs /tmp

if [ "$RUNTIME_CONFIG" = "qemu" ]; then
  OUTPUT_DEV="/dev/vdb"

  echo "Formatting scratch filesystem..."
  mke2fs -q -t ext2 -L scratch "/dev/vdd"

  mkdir "/mnt/scratch"
  mount "/dev/vdd" "/mnt/scratch"
  PREV_OUTPUT_CID_BLOCKDEV="/dev/vdc"
  DATA_DEV="/dev/vde"
else
  # mtdblock0 - cartesi rootfs (ext2)
  #         1 - datachain function (squashfs)
  #         2 - cartesi output (raw)
  #         3 - datachain previous output (car)
  #         4 - datachain scratch fs (ext2)
  #         5 - datachain input

  for dev in /dev/mtdblock[3-5]; do
    if [ -b "$dev" ]; then
      mtdblock=`basename $dev`
      mntpoint=`cat /sys/block/${mtdblock}/device/name`

      if [ "$mntpoint" = "scratch" ]; then
        echo "Formatting scratch filesystem..."
        mke2fs -q -t ext2 -L scratch "$dev"
      fi

      echo "Mounting /mnt/$mntpoint ..."
      mkdir -p "/mnt/$mntpoint"
      mount "$dev" "/mnt/$mntpoint"
    fi
  done
fi

# State overlay mountpoints and output directories.
echo "Bind mounting chroot code environment..."

PREV_OUTPUT_CID=$($ARCH_PATH/car root $PREV_OUTPUT_CID_BLOCKDEV)
INPUT_CID=$($ARCH_PATH/car root $DATA_DEV)

if [ x$PREV_OUTPUT_CID == xbafybeiczsscdsbs7ffqz55asqdf3smv6klcw3gofszvwlyarci47bgf354 ]; then
	echo "Empty state, picking input as our stage 2"
	STAGE2_DRIVE=$DATA_DEV
else
	STAGE2_DRIVE=$PREV_OUTPUT_CID_BLOCKDEV
fi

cd /mnt/scratch
$ARCH_PATH/car x -f $STAGE2_DRIVE --path boot/stage2.squashfs 

mkdir -p /mnt/stage2
mount -o ro /mnt/scratch/stage2.squashfs /mnt/stage2
mount --bind /dev  /mnt/stage2/dev
mount --bind /proc /mnt/stage2/proc
mount --bind /sys  /mnt/stage2/sys
mkdir -p /mnt/scratch/root
mount --bind /mnt/scratch/root /mnt/stage2/root

chroot /mnt/stage2 /init $RUNTIME_CONFIG $PREV_OUTPUT_CID_BLOCKDEV $DATA_DEV $OUTPUT_DEV

RET=$?
if [ x$RET != 0 ]; then
	echo "Something went wrong in stage2, return code $RET, returning previous output CID"
	cat /empty.car.rawKeccak > $OUTPUT_DEV
	cp /empty.car /mnt/scratch/root/output.car
fi

echo "Done, halting..."

/bin/sync

if [ "$RUNTIME_CONFIG" = "qemu" ]; then
  exec /sbin/reboot -f
else 
  exec /sbin/halt -f
fi
